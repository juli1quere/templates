// Generated using SwiftGen, by O.Halligon â€” https://github.com/SwiftGen/SwiftGen

{% if strings %}
import Foundation

// swiftlint:disable line_length
{% macro recursiveBlock strings %}
  {% for string in strings.strings %}
  /// {{string.translation}}
  case {{string.key|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}{% if string.parameters %}({{string.parameters|join}}){% endif %}
  {% endfor %}
  {% for subenum in strings.subenums %}
  {% call recursiveBlock subenum %}
  {% endfor %}
{% endmacro %}

{% set enumName %}{{param.enumName|default:"L10n"}}{% endset %}
enum {{enumName}} {
  {% call recursiveBlock structuredStrings %}
}

{% macro parametersBlock params %}{% for type in params %}let p{{forloop.counter}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro argumentsBlock params %}{% for type in params %}p{{forloop.counter}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro recursiveBlock strings %}
      {% for string in strings.strings %}
      {% if string.parameters %}
      case .{{string.key|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}({% call parametersBlock string.parameters %}):
        let format = NSLocalizedString("{{string.key}}", bundle: NSBundle(forClass: BundleToken.self), comment: "")
        return {{enumName}}.tr(format, {% call argumentsBlock string.parameters %})
      {% else %}
      case .{{string.key|swiftIdentifier|snakeToCamelCase|escapeReservedKeywords}}:
        let format = NSLocalizedString("{{string.key}}", bundle: NSBundle(forClass: BundleToken.self), comment: "")
        return {{enumName}}.tr(format)
      {% endif %}
      {% endfor %}
      {% for subenum in strings.subenums %}
      {% call recursiveBlock subenum %}
      {% endfor %}
{% endmacro %}
extension {{enumName}}: CustomStringConvertible {
  var description: String { return self.string }

  var string: String {
    switch self {
      {% call recursiveBlock structuredStrings %}
    }
  }

  private static func tr(format: String, _ args: CVarArgType...) -> String {
    return String(format: format, locale: NSLocale.currentLocale(), arguments: args)
  }
}

func tr(key: {{enumName}}) -> String {
  return key.string
}

private final class BundleToken {}
{% else %}
// No string found
{% endif %}
